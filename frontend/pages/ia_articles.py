import streamlit as st
import requests
from components.constant_components import show_feedback

API_IA_URL = "https://gradely-dee-greaseproof.ngrok-free.dev/ia"

def render_ia_articles():
    st.header("ü§ñ Inteligencia Artificial ‚Äî Art√≠culos")
    st.markdown("""
Este modo aplica funciones de **procesamiento y generaci√≥n IA** sobre los art√≠culos almacenados:
- Cargar art√≠culos desde un enlace web  
- Limpiar y analizar el contenido  
- Generar autom√°ticamente publicaciones sociales educativas  
""")

    accion = st.radio("Selecciona una acci√≥n:", [
        "Cargar art√≠culo desde enlace",
        "Listar art√≠culos existentes",
        "Generar publicaciones sociales"
    ])

    # --- Cargar art√≠culo desde enlace ---
    if accion == "Cargar art√≠culo desde enlace":
        st.subheader("üì∞ Agregar art√≠culo desde una URL")
        link = st.text_input("URL del art√≠culo a importar")
        if st.button("Importar art√≠culo"):
            if not link:
                show_feedback(False, "Por favor, ingresa una URL v√°lida.")
            else:
                try:
                    res = requests.post(f"{API_IA_URL}/add-link", params={"link": link})
                    if res.status_code == 200:
                        show_feedback(True, f"Art√≠culo agregado: {res.json().get('article_id')}")
                    else:
                        show_feedback(False, f"Error: {res.text}")
                except Exception as e:
                    show_feedback(False, f"Error al agregar: {e}")

    # --- Listar art√≠culos existentes ---
    elif accion == "Listar art√≠culos existentes":
        st.subheader("üóÇÔ∏è Lista de art√≠culos guardados")
        if st.button("Mostrar art√≠culos"):
            try:
                res = requests.get(f"{API_IA_URL}/all")
                res.raise_for_status()
                data = res.json()
                st.write(f"**{data.get('count', 0)} art√≠culos registrados**")
                for a in data.get("articles", []):
                    st.markdown(f"""
**üßæ {a.get('name', 'Sin t√≠tulo')}**
- ID: `{a.get('_id')}`
- Procesado: `{a.get('processed')}`
- Enlace: [{a.get('link')}]({a.get('link')})
- Descripci√≥n: {a.get('description', '(sin descripci√≥n)')}
""")
            except Exception as e:
                show_feedback(False, f"Error al obtener art√≠culos: {e}")

    # --- Generar publicaciones sociales ---
    elif accion == "Generar publicaciones sociales":
        st.subheader("üì¢ Generaci√≥n autom√°tica de publicaciones sociales")
        count = st.number_input("N√∫mero de publicaciones por art√≠culo", min_value=1, max_value=5, value=2)
        if st.button("Generar publicaciones"):
            try:
                res = requests.post(f"{API_IA_URL}/generate-posts", params={"count": count})
                if res.status_code == 200:
                    data = res.json()
                    show_feedback(True, data.get("message", "Publicaciones generadas con √©xito."))
                    st.json(data.get("details", {}))
                else:
                    show_feedback(False, f"Error: {res.text}")
            except Exception as e:
                show_feedback(False, f"Error al generar: {e}")
